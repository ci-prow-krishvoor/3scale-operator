sudo: required
# We need the systemd for the kubeadm and it's default from 16.04+
# dist: focal
os: linux-ppc64le
env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

before_install:
- sudo apt-get -qq -y install conntrack socat

before_script:
# Download kubectl, which is a requirement for using minikube.
# Create a script and run the below
- sh scripts/before_script.sh

- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.20.1/bin/linux/ppc64le/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.20.0/minikube-linux-ppc64le && chmod +x minikube && sudo mv minikube /usr/local/bin/
- mkdir -p $HOME/.kube $HOME/.minikube
- touch $KUBECONFIG

# Disabled registry
- sudo -E minikube start --force --profile=minikube --driver=none --insecure-registry "10.0.0.0/24"

# Spin it up with registry
# - sudo -E minikube start --force --profile=minikube --driver=none --addons=registry --insecure-registry "10.0.0.0/24"

- minikube update-context --profile=minikube
- "sudo chown -R travis: /home/travis/.minikube/"

script:
# Following is just to demo that the kubernetes cluster works.
- kubectl cluster-info
# Wait for kube-dns to be ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done

#### Create example Redis deployment on Kubernetes #### 
# - kubectl run travis-example --image=ppc64le/redis --labels="app=isv-india"
####  Make sure created pod is scheduled and running ####
# - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=travis-example -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done
